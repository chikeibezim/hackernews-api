##filter was added to feed to fetch data with specific filter
##pagination for the feed was also included via skip and take
type Query {
    info: String!
    feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
    link(id: ID!): Link
}

type Mutation {
    """
    Post - Add new item
    updateLink - update link given an ID and update parameters
    delete - delete an item given an ID
    """
    post(url: String!, description: String!): Link!
    signup(name: String!, email: String!, password: String!): AuthPayLoad
    login(email: String!, password: String!): AuthPayLoad
    vote(linkId: ID!): Vote

    # updateLink(id: ID!, url: String, description: String): Link
    # deleteLink(id: ID!): Link
}

"""
schema for subscriptions
"""

type Subscription {
    newLink: Link,
    newVote: Vote
}

type Link {
    id: ID!
    description: String!
    url: String!
    createdAt: String
    postedBy: User
    votes: [Vote!]!
}

type AuthPayLoad {
    token: String
    user: User
}

type User {
    id: ID!
    name: String
    email: String
    links: [Link!]!
}

type Vote {
    id: ID!
    link: Link!
    user: User!
}

##schema type for Feed to return feeds and feeds count

type Feed {
    links: [Link!]!
    count: Int!
}


##implement sorting
input LinkOrderByInput {
    description: Sort
    url: Sort
    createdAt: Sort
}

enum Sort {
    asc
    desc
}

